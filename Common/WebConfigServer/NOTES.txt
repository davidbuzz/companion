Buzz's internal notes for his use, mostly.

For precise syntax of JSON to be used, Please see the examples in the file json_samples.txt

# all MAC addresses in all JSON should be presented in lowercase, not UPPERCASE.  ie aa:bb:cc:dd:ee:ff  NOT  AA:BB:CC:DD:EE:FF and NOT Aa:Bb:cC:dD:.. etc 

#RPI notes for buzz:
apt-get install supervisor
http://supervisord.org/running.html

cat  /etc/supervisor/conf.d/WebConfigServer.conf
[program:WebConfigServer]
command=/root/WebConfigServe/runlinux.sh
autorestart=true
stdout_logfile=/var/log/WebConfigServer_main.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=1
redirect_stderr=True


apt-get remove hotplugd

service supervisor restart
update-rc.d supervisor enable 2

for buzzs tiny WIFI dongle setup see: 
https://www.maketecheasier.com/setup-wifi-on-raspberry-pi/

# for TP-LINK dongle: 
http://rfcdotme.blogspot.com.au/2012/10/installing-carl9170-firmware-on.html
except firmware blob is now found here:
http://git.kernel.org/cgit/linux/kernel/git/firmware/linux-firmware.git/tree/carl9170-1.fw
and dhcp/hostapd/iptables/nat etc from here:
http://elinux.org/RPI-Wireless-Hotspot
# avahi / mdns from here: 
http://www.howtogeek.com/167190/how-and-why-to-assign-the-.local-domain-to-your-raspberry-pi/
#hostname change:
http://www.howtogeek.com/167195/how-to-change-your-raspberry-pi-or-other-linux-devices-hostname/
#serial console etc: 
http://www.hobbytronics.co.uk/raspberry-pi-serial-port

# notes on basic auth and websockets together:
https://blog.heckel.xyz/2014/10/30/http-basic-auth-for-websocket-connections-with-undertow/

# newer pip needed:
 pip install --upgrade pip

# GPIO module comes from here:
pip install RPi.GPIO
or from here: https://pypi.python.org/pypi/RPi.GPIO


# this list of JSON samples has been parsed/validated using: http://www.jsoneditoronline.org/   ( paste it to the left 1/2 of the screen, then click the triangle in the middle that points to the right )

# general principles:   
Messages initiated on the "Buzz Linux Gateway", and Sent *to* the PORTAL instance expect a response ( coming back to "Buzz") containing "status": "OK".

Messages initiated on the PORTAL instance and Sent *to* the "Buzz Linux Gateway", expect a response ( coming back to "PORTAL") containing 
a variant of the original packet which contains a modified list of MAC address/s, and this: "response": "...some...string...here...", or sometimes no response at all. 


OUTBOUND REQUEST  FROM "BUZZ" TO PORTAL: 
{
  "DeviceUpdate": {
    "aa:bb:cc:dd:ee:ff": {
      "BatteryLevel": 3.6,
      "Temperature": 30,
      "RSSI": 1,
      "FirmwareVersion": "3.2.4",
      "NewDeviceStatus": "0",
      "LastDeviceSeenDateTime": 1465791665,
      "text1": "",
      "text2": ""
    },
    "aa:bb:cc:dd:ee:ee": {
      "BatteryLevel": 3.1,
      "Temperature": 20,
      "RSSI": 0.9,
      "FirmwareVersion": "3.2.1",
      "NewDeviceStatus": "1",
      "LastDeviceSeenDateTime": 1465791664,
      "text1": "",
      "text2": ""
    },
    "dd:ee:aa:dd:bb:ee": {
      "BatteryLevel": 3.1,
      "Temperature": 20,
      "RSSI": 0.9,
      "FirmwareVersion": "3.2.1",
      "NewDeviceStatus": "1",
      "LastDeviceSeenDateTime": 1465791664,
      "text1": "",
      "text2": ""
    }
  }
}
WITH RESPONSE, when it is accepted:
{
  "status": "OK"
}
Any string above except from 'OK' is considered a failure.
this similar response is also acceptable as it contains "status": "OK" in the JSON at the top level:
{
  "status": "OK",
  "BlahBLahBLah": "99",
  "some arbitrary info": "1234"
}

OUTBOUND REQUEST FROM "BUZZ" TO PORTAL: 
{
    "DeviceChange": {
      "eb:4f:80:b6:6a:e7": {
        "BatteryLevel": "f4 0f", 
        "FirmwareVersion": "0.9.9", 
        "LastDeviceSeenDateTime": 1466403342, 
        "LastRead": "00 00 00", 
        "NodeID": "01", 
        "NewDeviceStatus": 2, 
        "RSSI": 1.0, 
        "Temperature": 18
      }
    }
}
WITH RESPONSE, when it is accepted:
{
  "status": "OK"
}
or in some cases:
{ 
	 "status": "OK",
	 "AcknowledgedDeviceStatus": {
		"eb:4f:80:b6:6a:e7": {
			"NodeID": "01", 
			"NewDeviceStatus": 2, 
			...etc...       (as per the incoming request, there needs to be at least NodeID, NewDeviceStatus that matched the request) 
		}
	 }
}
TIP: Including the "AcknowledgedDeviceStatus" stanza, with "MAC", "NodeID" and "AcknowledgedDeviceStatus" in the above response is mandatory for a 
response only if any of the "NewDeviceStatus" values in the request is 2 or 4, and should contain the same data as in 
the request.    ie "NewDeviceStatus": 2  -->  "AcknowledgedDeviceStatus": 2 , etc..   
( the MAC and NodeID should simply be copied directly from the incoming packet) 
It is this Acknowledgement with the "AcknowledgedDeviceStatus" that affirms all the way back to the Serial Node that 
the "Server" ( ie PORTAL ) has seen the "Swipe"  ( status change ) properly.



OUTBOUND REQUEST FROM PORTAL TO "BUZZ":   ( aka "Snooze" aka "standby" )
{
  "AllClear":[
     "aa:bb:cc:dd:ee:ff",
     "aa:bb:cc:dd:ee:ee",
     "aa:bb:cc:dd:ee:dd",
     "aa:bb:cc:dd:ee:cc",
     "aa:bb:cc:dd:ee:bb",
     "aa:bb:cc:dd:ee:aa"
  ]
}
WITH RESPONSE, when it is accepted:  ( the list returned will be a SUBSET of the list sent out.)
{
  "AllClear":[
     "aa:bb:cc:dd:ee:ff",
     "aa:bb:cc:dd:ee:aa"
  ],
  "response": "...some...string...here..."

}

OUTBOUND REQUEST FROM PORTAL TO "BUZZ":   ( aka "High Alert" aka "Wake Up" but don't show any visible change. ) - FYI - this is called 'Heartbeat' by the serial 
{
  "HighAlert":[
     "aa:bb:cc:dd:ee:ff",
     "aa:bb:cc:dd:ee:ee",
     "aa:bb:cc:dd:ee:dd",
     "aa:bb:cc:dd:ee:cc",
     "aa:bb:cc:dd:ee:bb",
     "aa:bb:cc:dd:ee:aa"
  ]
}
WITH RESPONSE, when it is accepted:  ( the list returned will be a SUBSET of the list sent out.)
{
  "HighAlert":[
     "aa:bb:cc:dd:ee:ff",
     "aa:bb:cc:dd:ee:aa"
  ],
  "response": "...some...string...here..."

}	

// NewDeviceStatusID can be any one of the following   2 or 4 , any other value is ignored ( see Table 5 in Spec for the meaning of these values )
OUTBOUND REQUEST FROM PORTAL TO "BUZZ":   ( 4 here is the "NewDeviceStatusID" , whatever that is at the time. this request does not trigger either a  serial WakeUp Nor a serial Sleep)
{
  "ChangeStatus":{ 
     "aa:bb:cc:dd:ee:ff":  "2",    // flashing green
     "aa:bb:cc:dd:ee:aa":  "4",    //flashing red
  }
}
WITH RESPONSE, when it is accepted:  ( the list returned will be a SUBSET of the list sent out, unless "ff:ff:ff:ff:ff:ff" is sent, in which case it will be a full list of nodes)
{
  "ChangeStatus":{
     "aa:bb:cc:dd:ee:ff": "2",
     "aa:bb:cc:dd:ee:aa": "4"
  },
  "response": "...some...string...here..."
}